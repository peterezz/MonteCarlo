/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulationproject;

import java.awt.event.KeyEvent;
import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Peter
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();
        setLocationRelativeTo(null);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        setTitle("Monto Carlo modeling");
        
        loadData();

    }
    public void loadData()
    {
        data dat=new data();
    File f = new File("data.txt" );
if(f.exists() && !f.isDirectory()) { 
          fileManger fa = new fileManger();
        ArrayList<Object> dati = fa.read("data.txt");
         DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
   
String[][] data = new String[dati.size()][5];
        for (int i = 0; i < dati.size(); i++) {
            ArrayList<data> a = (ArrayList<data>) (Object) dati;
            data[i][0] =  Integer.toString(a.get(i).getDemand());
            data[i][1] = Integer.toString(a.get(i).getFrequancy());
            data[i][2] = Float.toString(a.get(i).getProbaility());
            data[i][3] = Float.toString(a.get(i).getComulative());
            data[i][4] = Float.toString(a.get(i).getFirst())+ " to "+Float.toString(a.get(i).getLast());
            

            tbModel.addRow(data[i]);
        }
}
    
        
    }

    public int getSum() {
        int sum = 0;
        int ave;
        int val;
        String result;
        DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            sum = sum + Integer.parseInt(jTable1.getValueAt(i, 1).toString());

        }
        return sum;

    }
    public boolean emptyTable() {
          DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();

        if (jTable1.getRowCount() == 0) {
            return true;
        }else return false;


    }

    public void getAve() {
        float ave;
        DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            int x = Integer.parseInt(jTable1.getValueAt(i, 1).toString());
            ave = (float) x / getSum();
//           result= Integer.toString(ave);

            tbModel.setValueAt(ave, i, 2);
        }

    }

    public void commulative() {
        DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
        float num;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            if (i == 0) {
                num = Float.parseFloat(jTable1.getValueAt(i, 2).toString());
                tbModel.setValueAt(num, i, 3);
            } else {
                num = Float.parseFloat(jTable1.getValueAt(i, 2).toString()) +
                        Float.parseFloat(jTable1.getValueAt(i - 1, 3).toString());
                tbModel.setValueAt(num, i, 3);
            }
        }
    }

    public void interval() {
        float first;
        float last;
        String interval ;
        DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            if (i == 0) {
                first=1;
                last = Float.parseFloat(jTable1.getValueAt(i, 3).toString()) * 100;
                interval = first + " to " + last;
                tbModel.setValueAt(interval, i, 4);

            } else {

                first = (Float.parseFloat(jTable1.getValueAt(i-1, 3).toString())*100) + 1;
                last = Float.parseFloat(jTable1.getValueAt(i, 3).toString()) * 100;
                interval = first + " to " + last;
                tbModel.setValueAt(interval, i, 4);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TXDemand = new javax.swing.JTextField();
        TXFrequancy = new javax.swing.JTextField();
        Add = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Ubdate = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        jLabel1.setText("Demand for your product");

        jLabel2.setText("Frequancy (Days)");

        TXDemand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXDemandActionPerformed(evt);
            }
        });
        TXDemand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXDemandKeyPressed(evt);
            }
        });

        TXFrequancy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXFrequancyActionPerformed(evt);
            }
        });

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        Add.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AddKeyPressed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Ubdate.setText("Update");
        Ubdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UbdateActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Demand for your product", "Frequancy", "Probality of occurance", "Comulative probabilty", "interval of random num"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Show simulation");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(65, 65, 65)
                .addComponent(TXDemand, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 460, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(57, 57, 57)
                .addComponent(TXFrequancy, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Delete)
                .addGap(422, 422, 422)
                .addComponent(Ubdate)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(TXFrequancy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(TXDemand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Add)
                    .addComponent(Delete)
                    .addComponent(Ubdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TXDemandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXDemandActionPerformed
        // TODO add your handling code here:
          DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
        String txDemand = TXDemand.getText();
        String txFrequancy = (TXFrequancy.getText());

        if (TXDemand.getText().equals("") && TXFrequancy.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No data entered");
        } else if (TXDemand.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Demand textfield is empty");
        } else if (TXFrequancy.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "frequancy textfield is empty");

        } else if (!txDemand.matches("[0-9]*$") && !txFrequancy.matches("[0-9]*$")) {
            JOptionPane.showMessageDialog(this, "all data must be integer");
        }else
        {

//            listOf_Data x = new listOf_Data(Data_ID, txDemand, txFrequancy);
//            x.addTo_List();
            tbModel.addRow(new Object[]{txDemand, txFrequancy});

            TXDemand.setText("");
            TXFrequancy.setText("");

        }
    }//GEN-LAST:event_TXDemandActionPerformed

    private void TXFrequancyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXFrequancyActionPerformed
        // TODO add your handling code here:
         DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
        String txDemand = TXDemand.getText();
        String txFrequancy = (TXFrequancy.getText());

        if (TXDemand.getText().equals("") && TXFrequancy.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No data entered");
        } else if (TXDemand.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Demand textfield is empty");
        } else if (TXFrequancy.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "frequancy textfield is empty");

        } else if (!txDemand.matches("[0-9]*$") && !txFrequancy.matches("[0-9]*$")) {
            JOptionPane.showMessageDialog(this, "all data must be integer");
        }else
        {

//            listOf_Data x = new listOf_Data(Data_ID, txDemand, txFrequancy);
//            x.addTo_List();
            tbModel.addRow(new Object[]{txDemand, txFrequancy});

            TXDemand.setText("");
            TXFrequancy.setText("");

        }
    }//GEN-LAST:event_TXFrequancyActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
        String txDemand = TXDemand.getText();
        String txFrequancy = (TXFrequancy.getText());

        if (TXDemand.getText().equals("") && TXFrequancy.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No data entered");
        } else if (TXDemand.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Demand textfield is empty");
        } else if (TXFrequancy.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "frequancy textfield is empty");

        } else if (!txDemand.matches("[0-9]*$") && !txFrequancy.matches("[0-9]*$")) {
            JOptionPane.showMessageDialog(this, "all data must be integer");
        }else
        {

//            listOf_Data x = new listOf_Data(Data_ID, txDemand, txFrequancy);
//            x.addTo_List();
            tbModel.addRow(new Object[]{txDemand, txFrequancy});

            TXDemand.setText("");
            TXFrequancy.setText("");
          
        }


    }//GEN-LAST:event_AddActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();

        if (jTable1.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "the table is empty");
        } else if (jTable1.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "no selected row");
        } else {
            tbModel.removeRow(jTable1.getSelectedRow());
            TXDemand.setText("");
            TXFrequancy.setText("");

        }

    }//GEN-LAST:event_DeleteActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
        String tbName = tbModel.getValueAt(jTable1.getSelectedRow(), 0).toString();
        String tbSubject = tbModel.getValueAt(jTable1.getSelectedRow(), 1).toString();
       
        TXDemand.setText(tbName);
        TXFrequancy.setText(tbSubject);


    }//GEN-LAST:event_jTable1MouseClicked

    private void UbdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UbdateActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
        String txDemand = TXDemand.getText();
        String txFrequancy = TXFrequancy.getText();

        if (jTable1.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "the table is empty");
        } else if (jTable1.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "no selected row");
        }

        tbModel.setValueAt(txDemand, jTable1.getSelectedRow(), 0);
        tbModel.setValueAt(txFrequancy, jTable1.getSelectedRow(), 1);

        TXDemand.setText("");
        TXFrequancy.setText("");


    }//GEN-LAST:event_UbdateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        data dat2=new data();   getAve();  commulative();   interval();
        dat2.deleteData();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
              data dat= new data();
              for (int j = 0; j < jTable1.getColumnCount(); j++) {
                
                  if(j==0)
                      dat.setDemand(Integer.parseInt(jTable1.getValueAt(i, j).toString()));
                  else if (j==1)
                            dat.setFrequancy(Integer.parseInt(jTable1.getValueAt(i, j).toString()));
                  else if (j==2)
                      dat.setProbaility(Float.parseFloat(jTable1.getValueAt(i, j).toString()));
                  else if (j==3)
                      dat.setComulative(Float.parseFloat(jTable1.getValueAt(i, j).toString()));
                  else if(j==4)
                  {
                      String line=jTable1.getValueAt(i, j).toString();
                      String rkam[]=line.split(" ");
                     dat.setFirst(Float.parseFloat(rkam[0]));
                     dat.setLast(Float.parseFloat(rkam[2]));}
                   }if(i==0)
               dat.addTo_fileFALSE();
        else  dat.addTo_fileTRUE();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (emptyTable())
              JOptionPane.showMessageDialog(this, "the table is empty");
        else
        {

        setVisible(false);
        Simulated_Data sim =new Simulated_Data();
        sim.setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void AddKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_AddKeyPressed

    private void TXDemandKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXDemandKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_TXDemandKeyPressed

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jPanel1KeyPressed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
  DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
   if (evt.getKeyCode() == KeyEvent.VK_DELETE) {

        if (jTable1.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "the table is empty");
        } else if (jTable1.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "no selected row");
        } else {
            tbModel.removeRow(jTable1.getSelectedRow());
            TXDemand.setText("");
            TXFrequancy.setText("");

        }
        // TODO add your handling code here:
      
             
   }
    }//GEN-LAST:event_jTable1KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Delete;
    private javax.swing.JTextField TXDemand;
    private javax.swing.JTextField TXFrequancy;
    private javax.swing.JButton Ubdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
